profzsh() {
  shell=${1-$SHELL}
  ZPROF=true $shell -i -c exit
}


if type ls >/dev/null; then 
  unalias ls 2>/dev/null
fi

ls() {
    if [[ $# -ne 0 ]] ; then command ls $@ --color; else tree -C -I ".DS_Store" -alL 1 ; fi
}

his() {
	cat ~/.zhistory | grep "${1}" | sed -E  's/(.*);(.*)/\2/' | egrep --color "${1}"
}

killgrep() {
  grep_string=$1
  sudo=$2
  ps aux | grep $grep_string | grep -v grep | awk '{print $2}' | xargs $sudo kill -9
}

skillgrep() {
  killgrep $1 sudo
}

branch() {
  git symbolic-ref --short -q HEAD
}

rp() {
  current_branch=$(branch)
  stash_messsage="Temporal stashing for rebase and push at $(date '+%Y-%m-%d %H:%M:%S')"
  git stash save $stash_messsage && git checkout "${1}" && git fetch origin master:master && git rebase master

  if [ $? -ne 0 ]; then
    echo "Something went wrong. You'll probably need to:"
    echo "\t- Return to your original branch ($current_branch)"
    if git stash list | head -1 | grep -q "$stash_messsage"; then
      echo "\t- Do an stash pop, look for the message ($stash_messsage)"
    fi
    return 1
  fi

  git push -f -u origin "${1}" && git checkout "${current_branch}"

  #check if our stash message is the first in the stash list, hence we stashed something
  if git stash list | head -1 | grep -q "$stash_messsage"; then
      #return to original state
      git stash pop
  fi
}

_rp() {
  local state

  _arguments \
    '1: :->branch' \

  case $state in
    (branch) _arguments "1:branches:($(git for-each-ref refs/heads --format='%(refname:short)'))" ;;
  esac
}

compdef _rp rp

gp() {
  git push -u origin "$(branch)"
}

gfp() {
  git push -f -u origin $(branch)
}

_reset_with_branch_keep_commits() {(
  set -e

  branch_for_reset=${1}
  commits_to_save=${2}
  remote="${3:=origin}"
  last_commit=$(git rev-parse HEAD)
  oldest_commit_to_keep=$(git rev-parse HEAD~$((${commits_to_save}-1)))
  current_branch=$(branch)
  copy_branch="copy-of-${current_branch}"
  stash_messsage="Temporal stashing for reset_with_master_keep_commit at $(date '+%Y-%m-%d %H:%M:%S')"
  git stash save --include-untracked $stash_messsage && git branch "${copy_branch}" && git fetch "${remote}" "${branch_for_reset}:${branch_for_reset}" && git reset --hard "${branch_for_reset}" && git cherry-pick "${oldest_commit_to_keep}"\^.."${last_commit}"

  if [ $? -ne 0 ]; then
    echo "Something went wrong. You'll probably need to:"
    echo "\t- Delete copy branch ($copy_branch)"
    if git stash list | head -1 | grep -q "$stash_messsage"; then
      echo "\t- Do an stash pop, look for the message ($stash_messsage)"
    fi
    return 1
  fi

  git branch -D "${copy_branch}"

  #check if our stash message is the first in the stash list, hence we stashed something
  if git stash list | head -1 | grep -q "$stash_messsage"; then
      #return to original state
      git stash pop
  fi
)}

rmk1() {
  _reset_with_branch_keep_commits master 1
}

pr() {
  PR=$1
  git fetch upstream refs/pull/${PR}/head:pr/${PR} && git checkout pr/${PR}
}

listpods() {
  kubectl get pods --all-namespaces -o jsonpath="{..image}" "$@" | tr -s '[[:space:]]' '\n' | sort | uniq -c
}

pm() {
  present_branch=$(branch)
  if [ "$present_branch" = "main" ]; then
    git pull upstream main
  else
    git fetch upstream main:main
  fi
}

untilfail() {
  iteration=0
  while "$@"; do let iteration+=1 ;echo "iteration $iteration"; done
}

4ever() {
  while sleep 5
  do
    "$@"
  done
}

setkubeconfig() {
  export KUBECONFIG=$1
}

podinnode() {
  NODE=$1 # Node name, kubectl get nodes to select one
  HOST_NETWORK="${2:-false}" # Use host netowkr in pod or not. Default is false, pass true as the second argument to enable

  kubectl run -it --rm --restart=Never busybox --image=alpine/curl --overrides='{"apiVersion": "v1", "spec": { "tolerations": [{"key": "node-role.kubernetes.io/master", "operator": "Equal", "value": "", "effect": "NoSchedule"}, {"key": "node-role.kubernetes.io/control-plane","operator": "Equal","value": "","effect": "NoSchedule"}],  "nodeSelector": { "kubernetes.io/hostname": "'$NODE'" }, "hostNetwork": '${HOST_NETWORK}', "dnsPolicy": "ClusterFirst" }}' sh
}


[[ ! -f ~/.functions_local ]] || source ~/.functions_local
